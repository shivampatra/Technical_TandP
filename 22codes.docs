import java.io.*;
import java.util.*;
public class MinFinancialLoss {
    public static int minimumLoss(int[] prices) {
        int n = prices.length;
        Map<Integer, Integer> priceIndexMap = new HashMap<>();
        // Store prices with their corresponding indices
        for (int i = 0; i < n; i++) {
            priceIndexMap.put(prices[i], i);
        }
        // Sort the prices in ascending order
        Arrays.sort(prices);
        int minLoss = Integer.MAX_VALUE;
        // Find the minimum loss by checking adjacent prices in sorted order
        for (int i = 1; i < n; i++) {
            int loss = prices[i] - prices[i - 1];

            // Ensure the purchase year is before the selling year
            if (priceIndexMap.get(prices[i]) < priceIndexMap.get(prices[i - 1])) {
                minLoss = Math.min(minLoss, loss);
            }
        }   
        return minLoss;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        // Read number of years
        int n = Integer.parseInt(reader.readLine().trim());
        // Read the prices
        int[] prices = Arrays.stream(reader.readLine().trim().split(" "))
                             .mapToInt(Integer::parseInt)
                             .toArray();
        
        // Compute and print the minimum loss
        System.out.println(minimumLoss(prices));
    }
}




import java.io.*;
import java.util.*;

public class median {
    public static int findMedian(int[] arr) {
        Arrays.sort(arr); // Sort the array
        return arr[arr.length / 2]; // Return the middle element
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine()); // Read the size of the array
        int[] arr = Arrays.stream(br.readLine().split(" "))
                          .mapToInt(Integer::parseInt)
                          .toArray();
        System.out.println(findMedian(arr));
    }
}





import java.io.*;
import java.util.*;

class MigratoryBirds {
    public static int migratoryBirds(int[] arr) {
        int[] birdCounts = new int[6]; // Bird types range from 1 to 5
        // Count occurrences of each bird type
        for (int bird : arr) {
            birdCounts[bird]++;
        }
        // Find the bird type with the highest count (and smallest ID in case of tie)
        int maxCount = 0;
        int minBirdId = 0;
        for (int i = 1; i <= 5; i++) {
            if (birdCounts[i] > maxCount) {
                maxCount = birdCounts[i];
                minBirdId = i;
            }
        }
        return minBirdId;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));   
        int n = Integer.parseInt(br.readLine()); // Read the number of sightings
        int[] arr = Arrays.stream(br.readLine().split(" "))
                          .mapToInt(Integer::parseInt)
                          .toArray();
        System.out.println(migratoryBirds(arr));
    }
}
